import { Novu, PushProviderIdEnum } from '@novu/node';
import crypto from 'crypto';
import { exec } from 'child_process';
const apiKey = process.env.NOVU_API;
const novu = new Novu(apiKey);

export function generateUniqueId(firstName, lastName) {
  const nameString = `${firstName}${lastName}`;
  const hash = crypto.createHash('sha256');
  hash.update(nameString);
  return hash.digest('hex');
}

function generateMessageId(sender) {
  const timestamp = new Date().getTime(); // Current time in milliseconds
  const randomComponent = Math.random().toString(36).substring(2, 15); // Random string for additional entropy
  return `${sender}-${timestamp}-${randomComponent}`;
}

// Function to generate a unique ID based on subject, sender, and current time
function generateUniqueSurveyId(subject, sender) {
  // Concatenate first name, last name, subject, sender, and current time
  const currentDataTime = Date.now();
  const nameString = `${subject}${sender}${currentDataTime}`;

  // Use SHA-256 hashing algorithm to generate a unique hash value
  const hash = crypto.createHash('sha256');
  hash.update(nameString);
  return hash.digest('hex');
}

export async function updateEmployeeToNovuSubscriber(employee) {
  try {
    const uid = generateUniqueId(employee['Payroll Name: First Name'].toUpperCase(), employee['Payroll Name: Last Name'].toUpperCase());

    const subscriberData = {
      firstName: employee['Payroll Name: First Name'],
      lastName: employee['Payroll Name: Last Name'],
    };

    if (employee['Email'] && typeof employee['Email'] === 'string' && employee['Email'].includes('@')) {
      subscriberData.email = employee['Email'];
    }

    if (employee['Phone'] && typeof employee['Phone'] === 'string' && employee['Phone'].trim().length > 0) {
      subscriberData.phone = employee['Phone'];
    }

    await novu.subscribers.identify(uid, subscriberData);

    console.log('Updated', employee['Payroll Name: First Name']);
  } catch (error) {
    console.error('Error updating employee to Novu subscriber:', error);
    throw error;
  }
}

export async function sendNovuNotification(formattedValues, messageContent, messageType, subject, sender, sendOptions) {
  const formattedArray = Array.isArray(formattedValues) ? formattedValues : [formattedValues];

  const filteredValuesToSend = formattedArray.map(({ Email, Phone, ...rest }) => {
    const toSend = { ...rest };

    toSend.app = sendOptions.app;
    if (sendOptions.email === 'true' && Email) {
      toSend.email = Email;
    }

    if (sendOptions.sms === 'true' && Phone) {
      toSend.phone = Phone;
    }

    return toSend;
  });

  const messageId = generateMessageId(sender);
  const sendApp = sendOptions.app;
  const sendEmail = sendOptions.email;
  const sendSMS = sendOptions.sms;
  let triggerType = 'rtut-general';
  let payload;
  const uniqueId = generateUniqueSurveyId(subject, sender);

  if (messageType === 'SURVEY'){
    triggerType = 'rtut-survey';
    payload = {
      messageType,
      messageContent,
      subject,
      sender,
      uniqueId,
      messageId,
    };
  }
  else {
    payload = {
      messageType,
      messageContent,
      subject,
      sender,
      sendApp,
      sendEmail,
      sendSMS,
      messageId,
    };
  }

  try {
    const response = await novu.trigger(triggerType, {
      to: filteredValuesToSend,
      payload: payload,
      overrides: {
        fcm: {
          data: {
            messageId: messageId
          },
        },
      },
    });

    const transactionId = response.data.data.transactionId;
    console.log('Notifications sent successfully with transactionId:', transactionId);

    // Return both message ID (generated by your function) and transaction ID (from the response)
    return {
      success: true,
      messageId: messageId,
      transactionId: transactionId,
      uniqueId: uniqueId, 
    };
  } catch (error) {
    console.error('Error triggering Novu notification:', error);
    throw error;
  }
}

// Obsolete
export async function sendNotification(triggerIdentifier, to, payload) {
  try {
    await novu.trigger(triggerIdentifier, {
      to: to,
      payload: payload,
    });
    console.log('Notification sent successfully');
  } catch (error) {
    console.error('Error sending notification:', error);
    throw error;
  }
}

export async function listNotifications(subscriberId) {
  try {
    const params = {
      subscriberId: subscriberId  //optional
    }
    await novu.messages.list(params);
    console.log('Notification listed successfully');
  } catch (error) {
    console.error('Error listing notification:', error);
    throw error;
  }
}

export async function deleteNotification(transactionId) {
  try {
    // await novu.messages.deleteById(messageId);
    const curlCommand = `curl --request DELETE \
    --url 'https://api.novu.co/v1/messages/transaction/${transactionId}' \
    --header 'Authorization: ApiKey ${apiKey}'`;

    exec(curlCommand, (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      if (stderr) {
        console.error(`stderr: ${stderr}`);
      }
      console.log(`stdout: ${stdout}`);
    });

    console.log('Notification deleted successfully');
  } catch (error) {
    console.error('Error deleting notification:', error);
  }
}

export async function updateEmployeesToNovuSubscribers(employees) {
  try {
    for (const employee of employees) {
      await updateEmployeeToNovuSubscriber(employee);
    }
    console.log('All employees processed successfully');
  } catch (error) {
    console.error('Error updating employees to Novu subscribers:', error);
  }
}

export async function updateEmployeeNovuSubscriberToken(firstName, lastName, token) {
  try {
    // Process each employee
    const uid = generateUniqueId(firstName.toUpperCase(), lastName.toUpperCase());

    await novu.subscribers.setCredentials(uid, PushProviderIdEnum.FCM, {
      deviceTokens: [token],
    });

    const response = await novu.subscribers.get(uid);
    console.log(response.data);
  } catch (error) {
    console.error('Error:', error);
  }
}