import { Novu, PushProviderIdEnum } from '@novu/node';
import crypto from 'crypto';
import { response } from 'express';
import { exec } from 'child_process';

const apiKey = process.env.NOVU_API;
const novu = new Novu(apiKey);

function generateUniqueId(firstName, lastName) {
  const nameString = `${firstName}${lastName}`;
  const hash = crypto.createHash('sha256');
  hash.update(nameString);
  return hash.digest('hex');
}

function generateMessageId(sender) {
  const timestamp = new Date().getTime(); // Current time in milliseconds
  const randomComponent = Math.random().toString(36).substring(2, 15); // Random string for additional entropy
  return `${sender}-${timestamp}-${randomComponent}`;
}

export const triggerSurveyNotification = async (formattedValues, surveyQuestionsString, subject, sender, uniqueId) => {
  const messageId = generateMessageId(sender);
  try {
    await novu.trigger('rtut-survey', {
      to: formattedValues,
      payload: {
        messageType: "SURVEY",
        messageContent: surveyQuestionsString,
        subject: subject,
        sender: sender,
        uniqueId: uniqueId,
        messageId: messageId
      }
    });
    console.log('Survey sent successfully');
  } catch (error) {
    console.error('Error triggering survey notification:', error.message);
  }
};

export async function sendNovuNotification(formattedValues, messageContent, subject, sender, sendOptions) {
  const filteredValuesToSend = formattedValues.map(({ Email, Phone, ...rest }) => {
    const toSend = { ...rest };

    if (sendOptions.email === 'true' && Email) {
      toSend.email = Email;
    }

    if (sendOptions.sms === 'true' && Phone) {
      toSend.phone = Phone;
    }

    return toSend;
  });

  const messageId = generateMessageId(sender);
  const sendEmail = sendOptions.email;
  const sendSMS = sendOptions.sms;
  try {
    const response = await novu.trigger('rtut-general', {
      to: filteredValuesToSend,
      payload: {
        messageType: "NOTIFICATION",
        messageContent,
        subject,
        sender,
        sendEmail,
        sendSMS,
        messageId: messageId
      },
      overrides: {
        fcm: {
          data: {
            messageId: messageId
          },
        },
      },
    });

    console.log(response);
    const transactionId = response.data.data.transactionId;
    console.log('Notifications sent successfully with transactionId:', transactionId);

    // Return both message ID (generated by your function) and transaction ID (from the response)
    return {
      success: true,
      messageId: messageId,
      transactionId: transactionId
    };
  } catch (error) {
    console.error('Error triggering Novu notification:', error);
    throw error;
  }
}

export async function sendNotification(triggerIdentifier, to, payload) {
  try {
    await novu.trigger(triggerIdentifier, {
      to,
      payload,
    });
    console.log('Notification sent successfully');
  } catch (error) {
    console.error('Error sending notification:', error);
    throw error;
  }
}

export async function listNotifications(subscriberId) {
  try {
    const params = {
      subscriberId: subscriberId  //optional
    }
    await novu.messages.list(params);
    console.log('Notification listed successfully');
  } catch (error) {
    console.error('Error listing notification:', error);
    throw error;
  }
}

export async function deleteNotification(transactionId) {
  try {
    // await novu.messages.deleteById(messageId);



    const curlCommand = `curl --request DELETE \
    --url 'https://api.novu.co/v1/messages/transaction/${transactionId}' \
    --header 'Authorization: ApiKey ${apiKey}'`;

    exec(curlCommand, (error, stdout, stderr) => {
      if (error) {
          console.error(`exec error: ${error}`);
          return;
      }
      if (stderr) {
          console.error(`stderr: ${stderr}`);
      }
      console.log(`stdout: ${stdout}`);
  });

    console.log('Notification deleted successfully');
  } catch (error) {
    console.error('Error deleting notification:', error);
  }
}

export async function updateEmployeesToNovuSubscribers(employees) {
  try {
    // Process each employee
    for (const employee of employees) {
      const uid = generateUniqueId(employee['First Name'].toUpperCase(), employee['Last Name'].toUpperCase());

      // Using findDocument utility to check if employee is already a subscriber
      const response = await novu.subscribers.get(uid);
      const subscriber = response.data;
      if (subscriber) {
        // Start with mandatory fields
        const subscriberData = {
          firstName: employee['First Name'],
          lastName: employee['Last Name'],
        };

        // Add email if it's a valid value
        if (employee['Email'] && typeof employee['Email'] === 'string' && employee['Email'].includes('@')) {
          subscriberData.email = employee['Email'];
        }

        // Add phone if it's a valid value
        if (employee['Phone'] && typeof employee['Phone'] === 'string' && employee['Phone'].trim().length > 0) {
          subscriberData.phone = employee['Phone'];
        }

        await novu.subscribers.identify(uid, subscriberData);
      }
      console.log('Renew', employee['First Name']);
    }

    console.log('Employees processed successfully');
  } catch (error) {
    console.error('Error:', error);
  }
}

export async function updateEmployeeNovuSubscriberToken(firstName, lastName, token) {
  try {
    // Process each employee
    const uid = generateUniqueId(firstName.toUpperCase(), lastName.toUpperCase());

    await novu.subscribers.setCredentials(uid, PushProviderIdEnum.FCM, {
      deviceTokens: [token],
    });

    const response = await novu.subscribers.get(uid);
    console.log(response.data);
  } catch (error) {
    console.error('Error:', error);
  }
}